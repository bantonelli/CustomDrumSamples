----- Meet AngularJS

It is possible to assemble a web application from smaller, thoroughly tested services.

----- Libraries and extensions

The active angular community keeps adding new extensions almost every day.
    Many of those are listed at http://ngmodules.org

----- Tools

Batarang - Chrome dev tool extension for inspecting AngularJS web applications.
    Very handy for visualizing runtime characteristics of AngularJS applications.

JetBrains AngularJS plugin


----- AngularJS crash course
ng-app - Bootstraps the html with angular application
ng-init - initializes a model before a template gets rendered
{{ expression }} - outputs model values

All the AngularJS special HTML tags and attributes are called directives

----- Two-way data binding

Any view changes are reflected in the model, and any changes in the model are instantly
propagated to a template.


----- The MVC pattern in AngularJS

Declares that Angular uses the MVW (model-view-whatever) pattern.
    Basically one needs to see it in action to get the feeling of it.


----- Bird's eye view

Should not have data initialization, logic and view should not be in one layer.


----- SCOPE -----

- A $scope object in AngularJS is here to expose the model to a template/view.

- By assigning properties to scope instances, we can make new values available to a
template for rendering.

- Scopes can hold data AND functionality specific to a given view's controller.
    - Therefore we can expose UI-specific logic to templates by defining functions on
    a scope instance.


----- CONTROLLER -----

The primary responsibility of a controller is to initialize scope objects.

Scope Initialization consists of:
    1) Providing initial model values
    2) Augmenting $scope with UI-specific behavior (functions)

Controllers are regular JS functions. They don't have to extend any
framework-specific classes or call any particular AngularJS APIs to correctly perform.

****NOTE
    A controller does the same job as the ng-init directive, when it comes to setting up
    initial model values.


----- MODEL -----

AngularJS models are regular JS objects.
    We don't have to construct model objects in any special way.

To expose a model to AngularJS you simply assign it to a $scope instance.


----- SCOPES IN DEPTH -----

- Each $scope is an instance of the Scope class.
The Scope class methods:
    1) Control the scope's lifecycle
    2) Provide event-propagation facility
    3) Support the template rendering process

----- Hierarchy of Scopes
Where does the $scope argument come from?

The ng-controller directive uses the Scope.$new() method call.
    AngularJS has a first instance of scope it is called $rootScope.

$rootScope gets created when a new application is bootstrapped with ng-app.

The ng-controller directive is an example of a scope-creating directive.
    AngularJS will create a new instance of the Scope class whenever it encounters a
    scope-creating directive in the DOM tree.

A newly-created scope will point to its parent scope using the $parent property.

ng-repeat also creates new child scopes.
    Example: <div ng-repeat="country in countries">
                {{ country.name }}
             </div>

    There is a new scope created for each item in the collection.
        Each item gets its own namespace.

****Note
    It is possible to define the same variable on different scopes without creating name collisions.
    (Each $scope has a different lexical scope within the DOM).
        Different DOM elements will simply point to different scopes and use variables from a
        correspoding scope to render a template.


----- Scopes Hierarchy and Inheritance

- Properties defined on one scope are visible to all child scopes, provided that a
child scope doesn't override that property.
    - You can use any of the parent scopes functions and variables anywhere
    within the child scope.

Scope inheritance follows the same rules as prototypical JavaScript inheritance.
    Try to read property and then traverse inheritance tree upward until the
    property is found.


----- Perils of inheritance through the scopes hierarchy

- You have to know that scope model inheritance is just like inheritance in JS.
    If you write a value to a child scope model via the view...
        - The value of the model overrides any parent scopes definition of
        that model.
            - This happens even if the model isn't explicitly defined in the
            js file.

- Avoid using the $parent property as it strongly links the AngularJS
code to the DOM structure.

----- Influencing properties defined on a parent scope from a child

- You should bind these more 'global' properties to an object of a parent
scope rather than directly to a scope.

****Note
    In general, avoid direct bindings to scope's properties. Two-way data
    binding to an object's properties (exposed on a scope) is preferred.

    Example: (Code inside of a controller)
    // this.myObject = {};
        -->is like saying--> $scope.<currentControllerAlias>.myObject = {};
            // you call this in html like <currentControllerAlias>.myObject

    Create an alias like this:
        <div ng-controller="MyCtrl as myctrl"></div>



----- Hierarchy of Scopes and the Eventing system -----

Events can be dispatched starting from any scope and travel either upwards ($emit)
or downwards ($broadcast).
    AngularJS core services and directives make use of this event bus.




